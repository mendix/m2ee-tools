#
# This file documents configuration options that can be set in the m2ee
# configuration file.
#
# This file is in YAML format (see: http://yaml.org/), a simple but very
# effective data serialization format which is easily human readable/writable as
# well.
#
# Basic YAML constructs are:
#
# # this is a comment, the next line contains a simple key/value pair:
# key: value
#
# dictionary:
#  key1: value1
#  key2: value2
#  key3: # this is a list
#   - item1
#   - item2
#   - item3
#  key4: [another, way, to, specify, a, list]
#  key5: [
#   also,
#   a,
#   list
#  ]
#  key6:
#   - # a list containing dictionaries
#    subkey: subvalue
#    subkey2: subvalue2
#   -
#    subkeyinlistitem2: value
#    anotherkeyinlistitem2: anothervalue
#
# The indentation level of one space is used a lot, as you can see.  Most values
# don't need quotes around them in yaml, but it doesn't hurt to use them. A
# colon (:) for example, can't be used without quoting. Also, when text
# highlighting of your editor starts to get fancy, you might use some extra
# quotes. :-)
#
# By default, the m2ee program tries to load configuration from the locations
# /etc/m2ee/m2ee.yaml and ~/.m2ee/m2ee.yaml
#
# Instead of the above defaults, it is possible to specify one or more
# configuration files using the -c parameter when starting m2ee. If the -c
# option is used more than once, configuration file content will be deep-merged.
#
# The configuration in /etc/ can be used to set server-wide configuration
# options without having to specify them again for each user. (if you run
# multiple applications on a single operating system installation, which is
# perfectly possible). Examples are the file system location where you put
# Mendix Runtime distributions (the unpacked mendix-x.y.z.tar.gz files)
#
# In configuration options explained below, the uncommented shown values are in
# most cases not default values, but just an example value. When an option has
# a default value, this is explained in the text.
#

mxnode:
 # mxjar_repo can be a single location, or a list of locations which need to be
 # searched for installed Mendix Runtime versions
 mxjar_repo: /usr/local/share/mendix/
 # or, when specifying multiple locations:
 #mxjar_repo: ["/opt/mendix/runtime/","/usr/local/share/mendix/"]
 # so, e.g. when starting an application that has been created using version
 # 4.2.2 of the Mendix Business Modeler, the following location would be checked
 # for existence: /usr/local/share/mendix/4.2.2/ when the configuration above is
 # used.

 # When using PostgreSQL as database, the m2ee program contains functionality to
 # quickly dump or restore a database snapshot to the data/database directory of
 # the project, or empty the complete database (e.g. before restoring an old
 # dump). The following configuration options can override the specific programs
 # that are used when executing these commands. During a transition when moving
 # from e.g. PostgreSQL 8.3 to 8.4 we used these to always dump databases using
 # 8.3 and restore them using 8.4 client tools, so it didn't matter what version
 # (either 8.3 or 8.4) a developer was using on his/her local workstation.
 #
 # Note: not all operating system distributions support running different
 # PostgreSQL versions at the same time on a server, so YMMV.
 #
 # default: just search for the default programs on the current OS search path
 pg_dump: /usr/lib/postgresql/8.3/bin/pg_dump
 pg_restore: /usr/lib/postgresql/8.4/bin/pg_restore
 psql: /usr/lib/postgresql/8.4/bin/psql

# The m2ee section defines configuration about a single application we're going
# to run.

m2ee:
 # The project name, which will be displayed when you start the m2ee program
 #
 # no default, configuration is mandatory
 app_name: My Project Name

 # The base path of your project directory. This is the location that contains
 # the data, model and web directories.
 #
 # no default, configuration is mandatory
 app_base: /path/to/project/
 # or, directly use a deployment directory on a windows machine running the
 # Business Modeler remotely... The modeler deployment directory has the same
 # directory structure setup.
 #app_base: /home/example/mnt/windows/D/Projects/HelloWorld/deployment/

 # The Mendix Runtime will listen on an 'administrative' TCP port after startup.
 # The 'admin port' is used by m2ee-tools for administrative commands like
 # sending configuration options, setting loglevels, requesting information
 # about the current status of the application proces, version information,
 # statistics about usage etc... This admin port only provides a simple custom
 # json-rpc style API over HTTP, so there's no visual web-interface or the like
 # present that can be used via a normal web browser. A user interface is
 # provided by the m2ee command line tool you're configuring right now. Make
 # sure access to this port is properly firewalled. Only local access is needed.
 #
 # no default, configuration is mandatory
 admin_port: 9000

 # Specify a comma separated list of addresses for the admin port to listen on
 # or use "*" to bind the wildcard address (IPv4: 0.0.0.0, IPv6: ::)
 #
 # This option is available in Mendix >= 4.3.0. In earlier versions the wildcard
 # option was always used.
 #
 # It is highly recommended to use the default value "127.0.0.1,::1" for the
 # admin interface, since the m2ee program always has to be run on the server
 # itself.
 admin_listen_addresses: "127.0.0.1,::1"

 # A password which protects the administrative interface, running on the admin
 # TCP port. set this password to e.g. a long random string, it's not used
 # manually anywhere. It's passed to the Mendix Runtime using an environment
 # variable, to make it possible for m2ee-tools to connect when running.
 #
 # no default, configuration is mandatory
 admin_pass: password

 # The TCP port we want the application to present itself on for end users.
 # When using a reverse proxy, only sub-urls presenting dynamic content, like
 # /xas/, /ws/ and /file are proxied to this port, and end users connect to that
 # reverse proxy instead of directly to this port.
 #
 # no default, configuration is mandatory
 runtime_port: 8000

 # Specify a comma separated list of addresses for the runtime port to listen on
 # or use "*" to bind the wildcard address (IPv4: 0.0.0.0, IPv6: ::)
 #
 # This option is available in Mendix >= 4.3.0. In earlier versions the wildcard
 # option was always used.
 #
 # When using a reverse http proxy on another host than where this application
 # is running, you want to set this to * or the IP address of the interface on
 # which the http traffic arrives.
 #
 # default: "127.0.0.1,::1"
 runtime_listen_addresses: "127.0.0.1,::1"

 # By default, a pid file containing the process id of the running Mendix
 # Runtime JVM is stored into the m2ee.pid file into the .m2ee directory of the
 # home directory of the user which runs this mendix application. Well, it is
 # possible to override the location.
 #
 # default: .m2ee/m2ee.pid under the current users home directory
 pidfile: /somwhere/else/m2ee.pid

 # The runtime_blocking_connector option specifies whether the Mendix Runtime
 # will use a Jetty BlockingChannelConnector for the runtime port http
 # interface, or a SelectChannelConnector.
 #
 # When using the BlockingChannelConnector implementation, a dedicated JVM
 # thread is allocated per connection. This solution fits situations where http
 # connection offloading is done at a reverse proxy between the end user and the
 # Mendix Runtime. If end users are directly connecting to this port (which is
 # not recommended) use runtime_blocking_connector false to prevent idle open
 # browser connections from unnecessarily occupying JVM threads.
 #
 # There might be uses cases in which not using runtime_blocking_connector is
 # better, e.g. when using custom request handlers and long polling, but these
 # are very specific edge cases.
 #
 # default: true
 runtime_blocking_connector: true

 # By default, the Mendix Runtime is started using an emptied environment map
 # for security reasons. There may be situations in which it is desired to keep
 # some specific environment variables, or set them to specific values. In this
 # case, the preserve_environment and custom_environment options come to the
 # rescue! Also see the next option, custom_environment, for inserting specific
 # variables into the environment at startup.
 #
 # preserve_environment can be eiter:
 #  - true -> keep all environment variables when starting the JVM process
 #  - false -> keep none (default)
 #  - a list of env variable names to keep (e.g. [LOGNAME,LANG]), while ignoring
 #    all others
 #
 # default: false
 preserve_environment: false
 #preserve_environment: [LOGNAME,LANG]

 # custom_environment can be used to add custom enviroment variables when
 # starting the JVM process.
 #
 # default: empty
 custom_environment:
  PATH: "/bin:/usr/bin/:/opt/some/weird/jre/version/bin/"

 # javaopts are custom command line options that will be inserted when starting
 # the Mendix Runtime JVM process. Any command line option that is accepted by
 # the JVM you are using can be inserted here. Options that are recommended to
 # set here are dedicated heap size (always set Xms to the same value as Xmx),
 # temporary files folder (to prevent using the system default /tmp) and default
 # file encoding.
 #
 # default: no default, always configure this properly
 javaopts: [
    "-Dfile.encoding=UTF-8", "-XX:MaxPermSize=64M", "-Xmx256M", "-Xms256M",
    "-Djava.io.tmpdir=/path/to/project/data/tmp",
 ]

 # Using extend_classpath, a list of additional locations can be provided that
 # will be added to the JVM classpath when starting the Mendix Runtime.
 #
 # Note: use this option with care. Realize that the JVM loads classes as soon
 # as they're used for the first time. This means that changes at the locations
 # you point at either won't be noticed, or oppose problems when the content of
 # the classpath was changed while the application is running.
 #
 # Note 2: this option is immediately deprecated, and will not be available in
 # Mendix 5. If you need to have external libraries in your production
 # environment that you do not want to maintain in the project itself, you
 # might consider using a post_unpack_hook to copy them into your userlib
 # project location server side.
 extend_classpath: [
    "/usr/local/share/java/greatstuff.jar",
    "/opt/dirty/*"
 ]

 # Using runtime_version, a specific runtime version can be forced to be used
 # when starting the Mendix Runtime. By default, the version of the Mendix
 # software used when creating an application using the Mendix Business Modeler
 # is read from the deployment files, based on which the same Runtime
 # distribution is started.
 #
 # You should never need to use this option. Even urgent hotfixes or security
 # updates should be coordinated with the project team using the Modeler.
 #
 # default: autodetected version from deployment files
 runtime_version: x.y.z

 # If symlink_mxclientsystem is set to true, try to symlink web/mxclientsystem
 # to the mxclientsystem directory of the runtime distribution currently in use.
 # This is useful for fixed web server configuration that followes symlinks, so
 # auto-detection of Mendix Runtime versions on application startup will
 # automatically update the /mxclientsystem/ url on which the javascript client
 # will be loaded. When setting this to false, you will need to (re)configure
 # your web server configuration to explicitely point the /mxclientsystem url to
 # the file system path of mxclientsystem in the mendix runtime distribution
 # every time the project team switches Mendix versions.
 #
 # default: true
 symlink_mxclientsystem: true

 # The 'post unpack hook' will be triggered right after a 'deployment archive'
 # is unpacked. There might be reasons why you might want to execute specific
 # actions to alter files or configuration that is contained in the deployment
 # archive that just has been unpacked into the model/ and web/ locations of the
 # project directory.
 #
 # default: undefined
 post_unpack_hook: '/path/to/project/data/hooks/post-unpack.sh'

 # When set to false, the allow_destroy_db option makes m2ee refuse to execute
 # the restoredb and emptydb commands. This option is particularly useful for
 # use in production environments, where you never ever want to have someone
 # make a mistake, messing up terminal windows and remove all of your production
 # data at once, instead of removing data in a test environment.
 #
 # Note: this only applies to the built-in PostgreSQL helper commands.
 #
 # default: true
 allow_destroy_db: true

 # This location is used for writing/reading database dumps and writing
 # validation query logs.
 #
 # defaults to data/database under app_base path
 database_dump_path: '/path/to/project/data/database'

 # This location is used for reading deployment archive uploads (.mda)
 #
 # defaults to data/model-upload under app_base path
 model_upload_path: '/path/to/project/data/model-upload'

 # When using the log command in the m2ee shell, m2ee-tools will execute a tail
 # -F on the log file of your Mendix Runtime. Unfortunately, it does not
 # automagically know where this file is located. You might be logging via
 # syslog to a file somewhere, or configure file based logging to some file
 # directly. To be able to live follow the logging, you need to hint m2ee-tools
 # about where the actual logfile will be located.
 #
 # default: no default
 #logfile: /path/to/project/data/log/logfile.txt
 logfile: /var/log/mendix/myproject.log

 # The munin sub-section of m2ee defines some behaviour of the munin_config and
 # munin_values commands that are provided to be used as munin plugin for
 # monitoring the Mendix Runtime process.
 munin:
  # config_cache points to a little file that contains the response that should
  # be sent when the munin config call is done. Providing the cached results of
  # this call prevents graphs from disappearing when the actual monitoring data
  # is not accessible (e.g. when the admin interface is crashed because of JVM
  # out of memory errors or other causes of instability)
  #
  # defaults to .m2ee/munin-cache.json under the current users home directory
  config_cache: /home/example/.m2ee/munin-cache.json
  #
  # The graph_total_named_users is a little hack that defines whether the total
  # amount of named users available in the application database should be
  # plotted into the graph of current user sessions. When the difference between
  # registered named users and actual amount of concurrent users is really big,
  # not displaying the total amount of registered users may make the graph look
  # more interesting.
  #
  # default: true
  graph_total_named_users: true

# The mimetypes section can be used to specify custom mime types to be used for
# file downloads.
#
# default: empty
mimetypes:
 ext: mime/type
 foo: mime/bar

# The logging section defines what sort of logging will be configured when
# starting the Mendix Runtime. Logging in the Mendix Runtime is done using a
# simple publish/ subscribe model. When logging messages from the application,
# they are published to log nodes, and we can subscribe to messages using
# loglevels on a log node.
#
# Use the loglevel command at the m2ee command line to alter log levels on the
# fly.
#
# The logging section uses a list of dictionaries to specify startup logging
# configuration. The two most important log subscriber implementations will log
# messages they receive directly to a file, or to the unix syslog over UDP.
#
# no default
logging:
 -
   # Example of Syslog Subscriber configuration. Using syslog is the recommended
   # logging method on *nix. Standard available tools like logrotate can be used
   # to rotate/compress logs. As a bonus, logs will be tamper-resistant because
   # they can be written to a place where the application user does not have
   # write permissions.
   type: syslog
   # Some unique name which will be used to refer to this log subscriber when
   # setting log levels.
   name: SysLogSubscriber
   # If autosubscribe is set, this log subscriber will subscribe to messages on
   # all new log nodes published having the specified log level or higher
   # severity.  Effectively this means that if you don't set it, you won't ever
   # see no log message. :-) Available log levels are: NONE, CRITICAL, ERROR,
   # WARNING, INFO, DEBUG, TRACE
   autosubscribe: INFO
   # Well-known syslog specific parameters:
   host: localhost
   port: 514
   facility: LOCAL6
   prefix: example
 -
   # Example of File Subscriber configuration. This log subscriber will output
   # all log messages directly to a text file.
   type: file
   # Some unique name which will be used to refer to this log subscriber when
   # setting log levels.
   name: FileSubscriber
   # If autosubscribe is set, this log subscriber will subscribe to messages on
   # all new log nodes published having the specified log level or higher
   # severity.  Effectively this means that if you don't set it, you won't ever
   # see no log message. :-) Available log levels are: NONE, CRITICAL, ERROR,
   # WARNING, INFO, DEBUG, TRACE
   autosubscribe: INFO
   # File to log to.
   filename: /home/knorrie/mnt/windoos_k/Projects/logging/out.log
   # The file subscriber implements very simple rotate functionality, which
   # stops writing a log file when the size of the file reaches max_size bytes.
   # Sadly, there's no m2ee api call to make the Mendix Runtime re-open its
   # logfile (yet), so directly using logrotate on these files (together with
   # setting max_rotation 0 is not possible. When requiring more advanced log
   # rotate and compression functionality, it is recommended to use logging via
   # unix syslog.  default: 2097152 bytes (2MB)
   max_size: 10485760 # specify this value in bytes
   # After opening a new log file, max_rotation amount of files will be kept,
   # and will be renamed with a dot-number suffix like file.1, file.2, file.3
   # etc. Set max_rotation to 0 to never rotate
   # default: 10
   max_rotation: 10

# The last section of this file contains the 'mxruntime' section, which contains
# configuration which will be sent to the Mendix Runtime when it's started.
#
# TODO: document proper use of SSL Client Certificates for web service calls
#
mxruntime:
 # Application root URL will be used when generating wsdl documentation on the
 # fly at /ws-doc/
 ApplicationRootUrl: https://example.mendix.com/

 MicroflowConstants:
  # put microflow constants in here
  Module.Constant: text
  AnotherModule.AnotherConstant: bla

 # ScheduledEventExecution can be set to ALL, NONE (default) or SPECIFIED
 ScheduledEventExecution: NONE
 # When using ScheduledEventExecution SPECIFIED, provide a list of actions to
 # enable:
 MyScheduledEvents:
  - Module1.Event1
  - Module2.Event2
  - Module3.Event3

 # Database login credentials
 DatabaseType: PostgreSQL
 # The DatabaseHost contains the database hostname and optionally, also the TCP
 # port number.  It's possible to use a plain IPv6 address by enclosing it in
 # brackets, like: "[::1]:5432"
 DatabaseHost: "127.0.0.1:5432"
 DatabaseName: database
 DatabaseUserName: username
 DatabasePassword: password

 # Advanced Database options...
 #
 # Enable DatabaseUseSsl to enable using SSL with PostgreSQL connections. Be
 # sure to test this extensively in your setup before enabling this in
 # production, to be sure you know the quircks about long living transactions,
 # data transfer volumes and SSL renegotiation.
 DatabaseUseSsl: False
 # Defines the SERVICE_NAME when you have a connection with an Oracle DBMS.
 OracleServiceName: MyServiceName

 # Advanced Database connection pooling configuration
 #
 # The Mendix Runtime uses a pool of database connections to minimize the
 # overhead of opening and closing connections. When queries are sent to the
 # database an already opened connection can be borrowed from the pool and be
 # returned after the query completes.
 #
 # Max Active sets the cap on the total number of active database connections.
 # When the Max Active amount of connections is in use, the Runtime will throw
 # an exception if no connection becomes available before the configured amount
 # of time at the Max Wait setting has passed. Use this settings to set a
 # safeguard to prevent runaway application behaviour from also hogging down
 # your database server.
 #
 # default: 50
 ConnectionPoolingMaxActive: 50
 # default: 10000 milliseconds
 ConnectionPoolingMaxWait: 10000
 #
 # Max Idle sets the cap on the number of "idle" instances in the pool.
 # Best practice is to set this value equal to Max Active, and let the
 # connection pool gradually shrink to the Min Idle amount if connections are
 # not actually in use.
 #
 # default: 50 (Mendix >= 3.3), 20 (Mendix < 3.3)
 ConnectionPoolingMaxIdle: 50
 #
 # Min Idle sets the minimum amount of idle connections that is held open to
 # anticipate on new incoming requests.
 #
 # default: 0
 ConnectionPoolingMinIdle: 5
 #
 # This setting with a very long name sets the amount of connections that will
 # be inspected every few minutes to close idle connections. A negative value
 # specifies the fraction of the total amount of connections that will be
 # inspected.
 #
 # default: -3 (clean up about 1/3 of unneeded idle connections)
 ConnectionPoolingNumTestsPerEvictionRun: "-10"

 # Abort database SELECT queries that are started from a client XPath request,
 # or XLS/CSV Export button and run for a configurable amount of time.
 # The reverse http proxy in use might have a proxy gateway timeout set (which
 # is by default 60 seconds when using Nginx for example), so continuing while
 # nobody can receive the results anymore is a bit pointless...
 #
 # Setting this option prevents runaway database queries from eating up all
 # of your database cpu cycles, while you're busy tracing down the source of
 # the problem (using LogMinDurationQuery, see below)
 #
 # This option was introduced in Mendix version 2.5.6
 # The value is specified in seconds.
 #
 # default: not set, no timeout
 ClientQueryTimeout: 70

 # Log all database queries that take more of the configured amount of time to
 # deliver a result set.
 #
 # This option was introduced in Mendix 4.1.0
 # The value is specified in milliseconds.
 #
 # default: not set, no logging
 LogMinDurationQuery: 10000

 # TrackWebServiceUserLastLogin defines whether to update the web service users
 # 'LastLogin' field on each login. When this happens a database update query
 # has to be sent and this can have performance consequences on heavy loaded
 # systems. When this setting is set to false, no database interaction is
 # necessary.
 #
 # This option was introduced in Mendix version 4.3.0
 #
 # default: True
 TrackWebServiceUserLastLogin: True

 # 'Session Fingerprinting' is a feature that was introduced in Mendix 3.2.0
 # On login, a fingerprint of browser information is taken, which is compared to
 # the same information on subsequent requests. Doing this slightly increases
 # the difficulty of succesful interaction with an application after stealing
 # session cookies from another user.
 #
 # An option to turn off fingerprinting was introduced in Mendix version 4.1.0
 # Session Fingerprinting was completely removed in Mendix 4.3.0, as it causes
 # more issues than it fixes.
 #
 # default: True
 EnableSessionFingerprinting: False

 # License key file (2.5.x only, for 3.x+ use the activate_license m2ee command)
 #KeyFile: /path/to/some/place/key.mx

 # DTAPMode is an old setting that specifies in which DTAP (Development, Test,
 # Acceptance, Production) step the application is running. The Mendix Runtime
 # will behave differently when using Development/Test setting than in
 # Acceptance/Production. In D/T, more 'development'-like extra magic
 # functionality like automatically creating/updating an administrative account
 # or trying to create a database when it does not exist is enabled.
 #
 # Nowadays this DTAP stages are replaced by the 'Configurations' tab page in
 # Project Settings in the Modeler, which allows to create any number of sets of
 # configuration settings to be used. (e.g. run on built-in database for
 # development, switch to test-database of the project team etc...) The Modeler
 # always starts using the Development mode.
 #
 # NEVER EVER use Development or Test on a production server.
 #
 # Also, NEVER EVER run the Modeler on a production database using e.g. an ssh
 # tunnel to the database. Because the Modeler is always using development mode,
 # it will instantaneously reset the password of the 'admin user' which is
 # defined in the modeler to its development default (which likely means there
 # will be a user MxAdmin with password set to '1' and/or create this account
 # when it does not exist, which you DO NOT WANT TO HAPPEN.
 #
 # default: P(roduction)
 #DTAPMode: P
